language: cpp

matrix:
  include:
     - os: osx
       compiler: clang
       env: NODE_VERSION="1.2.0" COVERAGE=true # node abi 43 WITH COVERAGE
     - os: linux
       compiler: clang
       env: NODE_VERSION="1.2.0" COVERAGE=false # node abi 43
     - os: linux
       compiler: clang
       env: NODE_VERSION="1.0.4" COVERAGE=false # node abi 42
     - os: linux
       compiler: clang
       env: NODE_VERSION="0.12.0" COVERAGE=false # node abi 14
     - os: linux
       compiler: clang
       env: NODE_VERSION="0.11.4" COVERAGE=false # node abi 14, but versioned on major.minor.patch since it is an unstable series
     - os: linux
       compiler: clang
       env: NODE_VERSION="0.10.36" COVERAGE=false # node abi 11
     - os: osx
       compiler: clang
       env: NODE_VERSION="1.2.0" COVERAGE=false # node abi 43
     - os: osx
       compiler: clang
       env: NODE_VERSION="1.0.4" COVERAGE=false # node abi 42
     - os: osx
       compiler: clang
       env: NODE_VERSION="0.12.0" COVERAGE=false # node abi 14
     - os: osx
       compiler: clang
       env: NODE_VERSION="0.11.4" COVERAGE=false # node abi 14, but versioned on major.minor.patch since it is an unstable series
     - os: osx
       compiler: clang
       env: NODE_VERSION="0.10.36" COVERAGE=false # node abi 11

env:
  global:
   - JOBS: "8"
   - MAPNIK_GIT: v3.0.0-rc1-616-g4afcac5-gdal-dev
   - secure: F42vcZEgWgCMDvQXlmyYmWwFo86fUjlJbsvXEwyliaMfasjCNsbmeILU61aScn8daiCGD+vRUaRlmv+XxUSS2G8FaoI8ZjwgMo2guMwthAQJ1ohTvf4bZI0JqVYKnnZpzhGPv2zD0DTdt31l30qn2GZnnGrF4yFpPU1HW2HcMuE=
   - secure: WRWrn3KjCaevRo2htdvn26euALTZNCDtcSlQvtH6Bc7yLdhlH5apj+qSuWqlN59f1cprFH+5aQ2zmBkVmAV2DT4IbsfszMIR6k6EetuY6VOugo/qsPW2x/MQbpFgjCbl95bYty4eUH9Bcf70Pz/S+XVewABXHWikJiLUiZBbLyE=


before_install:
 - platform=$(uname -s | sed "y/ABCDEFGHIJKLMNOPQRSTUVWXYZ/abcdefghijklmnopqrstuvwxyz/")
 # upgrade libstdc++ to support C++11
 - if [[ ${platform} == 'linux' ]]; then sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test;sudo apt-get update -y;sudo apt-get install -y libstdc++6; fi;
 - if [[ ${platform} == 'darwin' ]]; then xcrun --sdk macosx --show-sdk-version; fi;
 # check if tag exists and matches package.json
 - scripts/validate_tag.sh
 - COMMIT_MESSAGE=$(git show -s --format=%B $TRAVIS_COMMIT | tr -d '\n')
 # put node-pre-gyp on path
 - export PATH=./node_modules/.bin/:$PATH
 # here we set up the node version on the fly based on the matrix value.
 # This is done manually so that it is easy to flip the 'language' to
 # objective-c in another branch (to run the same travis.yml on OS X)
 - git clone https://github.com/creationix/nvm.git ../.nvm
 - source ../.nvm/nvm.sh
 - nvm install $NODE_VERSION
 - nvm use $NODE_VERSION
 - node --version
 - npm --version
 - PUBLISH_BINARY=false
 - REPUBLISH_BINARY=false
 - if [[ ${COVERAGE} == true ]]; then
      brew update;
      brew install pyenv;
      eval "$(pyenv init -)";
      pyenv install 2.7.6;
      pyenv global 2.7.6;
      pyenv rehash;
      pip install cpp-coveralls;
      pyenv rehash;
     fi;

install:
 - if [[ "${CXX}" =~ "g++" ]]; then export JOBS=2; fi;
 - if [[ ${COVERAGE} == false ]];
   then
   if [[ ${COMMIT_MESSAGE} =~ "[test binary]" ]];
      then npm install --fallback-to-build=false; 
      else ./scripts/build_against_sdk.sh && rm -rf sdk; 
   fi;
   else ./scripts/build_against_sdk.sh --coverage=true;
   fi;
 - npm test

before_script:
 - if [[ ${COMMIT_MESSAGE} =~ "[publish binary]" ]] && [[ ${CXX} =~ "clang" ]] && [[ ${COVERAGE} == false ]]; then PUBLISH_BINARY=true; fi;
 - if [[ ${COMMIT_MESSAGE} =~ "[republish binary]" ]] && [[ ${CXX} =~ "clang" ]] && [[ ${COVERAGE} == false ]]; then REPUBLISH_BINARY=true; fi;

script:
 - node-pre-gyp package testpackage
 - if [[ ${COVERAGE} == true ]]; then cpp-coveralls --exclude node_modules --exclude tests --build-root build --gcov-options '\-lp' --exclude tools --exclude docs --exclude sdk --exclude build/Release/obj/gen; fi;
 - if [[ ${PUBLISH_BINARY} == true ]]; then node-pre-gyp publish; fi;
 - if [[ ${REPUBLISH_BINARY} == true ]]; then node-pre-gyp unpublish && node-pre-gyp publish; fi;
 - if [[ ${PUBLISH_BINARY} == true ]] || [[ ${REPUBLISH_BINARY} == true ]]; then node-pre-gyp info; rm -rf {build,lib/binding}; node-pre-gyp install; npm test; fi
 # always killed by travis
 #- nice -n 19 node --expose-gc bench/error/test_vt_abort.js
 - nice -n 19 node --expose-gc bench/error/test_vt_abort2.js
